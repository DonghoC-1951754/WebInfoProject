scalar Date

type User {
    id: ID!
    firstName: String!
    name: String!
    email: String!
    password: String!
    dateOfBirth: Date!
    location: Location!
    gender: String!
    educations: [Education!]
    experiences: [Experience!]
    connections: [UserConnection!]
}
type UserConnection{
    id: ID!
    fromUserId: ID!
    toUserId: ID!
    status: String!
}

type Company {
    id: ID!
    name: String!
    email: String!
    password: String!
    location: Location!
    vacancies: [Vacancy]
}

type Location{
    country: String!
    city: String!
    cityCode: String!
    street: String
    houseNumber: String
}

type Education {
    id: ID!
    institution: String!
    degree: String!
    fieldOfStudy: String!
    yearGraduated: Int
}

type Experience {
    id: ID!
    company: Company!
    jobTitle: String!
    startDate: Date!
    endDate: Date!
    description: String
    requiredSkills: [String]
    matchedUsers: [User] 
}

type Vacancy {
    id: ID!
    jobTitle: String!
    company: Company!
    requiredSkills: [String]
    startDate: Date!
    endDate: Date!
    location: Location!
    matchedUsers: [User]
}



# Inputs
input LocationInput {
    country: String!
    city: String!
    cityCode: String!
    street: String
    houseNumber: String
}

input EducationInput {
    id: ID
    institution: String!
    degree: String!
    fieldOfStudy: String!
    yearGraduated: Int
}

input ExperienceInput {
    id: ID
    company: ID!
    jobTitle: String!
    startDate: String
    endDate: String
    description: String
}

input VacancyInput {
    id: ID
    jobTitle: String!
    company: ID!
    location: LocationInput!
    requiredSkills: [String]
    startDate: Date!
    endDate: Date!
}

#Queries
type Query {
    users: [User]
    companies: [Company]
    user(id: ID!): User
    company(id: ID!): Company
    userByEmail(email: String!): User
    companyByEmail(email: String!): Company
    activeVacancies(currentDate: Date!): [Vacancy]
    connections(userId: ID!): [UserConnection!] 
    matchedUsers(vacancyId: ID!): [User]  # Get matched users for a specific vacancy

    vacancies: [Vacancy]
    vacancy(id: ID!): Vacancy
}

# Mutation Type: Modify data in the system
type Mutation {
    createUser(
        firstName: String!,
        name: String!,
        email: String!,
        password: String!,
        dateOfBirth: Date!,
        location: LocationInput!,
        gender: String!
    ): User
    
    createCompany(
        name: String!,
        email: String!,
        password: String!,
        location: LocationInput!
    ): Company

        # New Mutation for Updating a User
    updateUser(
        id: ID!,
        firstName: String,
        name: String,
        location: LocationInput,
        gender: String
    ): User

    #education mutations
    addUserEducation(userId: ID!, education: EducationInput!): Education
    updateUserEducation(userId: ID!, educationId: ID!, education: EducationInput!): Education
    removeUserEducation(userId: ID!, educationId: ID!): String

    #experience mutations
    addUserExperience(userId: ID!, experience: ExperienceInput!): Experience
    updateUserExperience(userId: ID!, experienceId: ID!, experience: ExperienceInput!): Experience
    removeUserExperience(userId: ID!, experienceId: ID!): String

     # Connection mutations
    sendConnectionRequest(fromUserId: ID!, toUserId: ID!): UserConnection
    confirmConnectionRequest(connectionId: ID!): UserConnection
    rejectConnectionRequest(connectionId: ID!): String

    createVacancy(vacancy: VacancyInput!): Vacancy
    updateVacancy(id: ID!, vacancy: VacancyInput!): Vacancy
    deleteVacancy(id: ID!): String
    addMatchedUserToVacancy(vacancyId: ID!, userId: ID!): Vacancy
    removeMatchedUserFromVacancy(vacancyId: ID!, userId: ID!): Vacancy
}
