scalar Date

type User {
    id: ID!
    firstName: String!
    name: String!
    email: String!
    dateOfBirth: Date!
    location: Location!
    gender: String!
    lookingForWork: Boolean!
    educations: [Education!]
    experiences: [Experience!]
    connections: [UserConnection]
    skills: [String]
}

type UserConnection{
    id: ID!
    fromUser: User!
    toUser: User!
    status: String!
}

type Company {
    id: ID!
    name: String!
    email: String!
    location: Location!
    vacancies: [Vacancy]
}

type Location{
    country: String!
    city: String!
    cityCode: String!
    street: String
    houseNumber: String
}

type Education {
    id: ID!
    institution: String!
    degree: String!
    fieldOfStudy: String!
    yearGraduated: Int
}

type Experience {
    id: ID!
    company: Company!
    jobTitle: String!
    startDate: Date!
    endDate: Date
    description: String
}

type Vacancy {
    id: ID!
    jobTitle: String!
    company: Company!
    requiredSkills: [String]
    startDate: Date!
    endDate: Date
    location: Location!
}



# Inputs
input LocationInput {
    country: String!
    city: String!
    cityCode: String!
    street: String
    houseNumber: String
}

input EducationInput {
    id: ID
    institution: String!
    degree: String!
    fieldOfStudy: String!
    yearGraduated: Int
}

input ExperienceInput {
    id: ID
    company: ID!
    jobTitle: String!
    startDate: Date!
    endDate: Date
    description: String
}

input VacancyInput {
    id: ID
    jobTitle: String!
    company: ID!
    location: LocationInput!
    requiredSkills: [String]
    startDate: Date!
    endDate: Date
}

#Queries
type Query {
    users: [User]
    user(id: ID!): User

    companies: [Company]
    company(id: ID!): Company

    activeVacancies(currentDate: Date!): [Vacancy]
    #possible filtering with the type string
    connections(userId: ID!, type: String!): [UserConnection!]

    vacancies: [Vacancy]
    vacancy(id: ID!): Vacancy
    matchingVacancies(userId: ID!, currentDate: Date!): [Vacancy]
    matchedUsers(vacancyId: ID!): [User]
    
    # Fetch vacancies created by a company
    companyVacancies(companyId: ID!): [Vacancy]
}

# Mutation Type: Modify data in the system
type Mutation {
    createUser(
        firstName: String!,
        name: String!,
        email: String!,
        dateOfBirth: Date!,
        location: LocationInput!,
        gender: String!
    ): User
    
    createCompany(
        name: String!,
        email: String!,
        location: LocationInput!
    ): Company

        # New Mutation for Updating a User
    updateUser(
        id: ID!,
        firstName: String,
        name: String,
        location: LocationInput,
        gender: String,
        lookingForWork: Boolean,
        skills: [String]
    ): User

    updateCompany(
        id: ID!,
        name: String,
        location: LocationInput,
    ): Company

    #education mutations
    addUserEducation(userId: ID!, education: EducationInput!): Education
    updateUserEducation(userId: ID!, educationId: ID!, education: EducationInput!): Education
    removeUserEducation(userId: ID!, educationId: ID!): String

    #experience mutations
    addUserExperience(userId: ID!, experience: ExperienceInput!): Experience
    updateUserExperience(userId: ID!, experienceId: ID!, experience: ExperienceInput!): Experience
    removeUserExperience(userId: ID!, experienceId: ID!): String

     # Connection mutations
    sendConnectionRequest(fromUserId: ID!, toUserId: ID!): UserConnection
    updateConnectionRequest(connectionId: ID!, status: String!): UserConnection
    removeConnection(connectionId: ID!): String

    createVacancy(vacancy: VacancyInput!): Vacancy
    updateVacancy(id: ID!, vacancy: VacancyInput!): Vacancy
    deleteVacancy(id: ID!): String
}
